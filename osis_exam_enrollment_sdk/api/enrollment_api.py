"""
    Exam Enrollment Service

    A set of API endpoints that allow you to get information about exam enrollment  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from osis_exam_enrollment_sdk.api_client import ApiClient, Endpoint as _Endpoint
from osis_exam_enrollment_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from osis_exam_enrollment_sdk.model.accepted_language_enum import AcceptedLanguageEnum
from osis_exam_enrollment_sdk.model.error import Error
from osis_exam_enrollment_sdk.model.exam_enrollment import ExamEnrollment


class EnrollmentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __enrollments_list(
            self,
            program_acronym,
            year,
            session,
            global_id,
            **kwargs
        ):
            """enrollments_list  # noqa: E501

            Return all enrollments for a given program  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.enrollments_list(program_acronym, year, session, global_id, async_req=True)
            >>> result = thread.get()

            Args:
                program_acronym (str): The program acronym
                year (int): The academic year
                session (int): The exam session
                global_id (str): The global id of the student

            Keyword Args:
                accept_language (AcceptedLanguageEnum): The header advertises which languages the client is able to understand, and which locale variant is preferred. (By languages, we mean natural languages, such as English, and not programming languages.) . [optional]
                x_user_first_name (str): [optional]
                x_user_last_name (str): [optional]
                x_user_email (str): [optional]
                x_user_global_id (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ExamEnrollment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['program_acronym'] = \
                program_acronym
            kwargs['year'] = \
                year
            kwargs['session'] = \
                session
            kwargs['global_id'] = \
                global_id
            return self.call_with_http_info(**kwargs)

        self.enrollments_list = _Endpoint(
            settings={
                'response_type': ([ExamEnrollment],),
                'auth': [
                    'Token'
                ],
                'endpoint_path': '/enrollments/{program_acronym}/{year}/{session}/{global_id}/',
                'operation_id': 'enrollments_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'program_acronym',
                    'year',
                    'session',
                    'global_id',
                    'accept_language',
                    'x_user_first_name',
                    'x_user_last_name',
                    'x_user_email',
                    'x_user_global_id',
                ],
                'required': [
                    'program_acronym',
                    'year',
                    'session',
                    'global_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'program_acronym':
                        (str,),
                    'year':
                        (int,),
                    'session':
                        (int,),
                    'global_id':
                        (str,),
                    'accept_language':
                        (AcceptedLanguageEnum,),
                    'x_user_first_name':
                        (str,),
                    'x_user_last_name':
                        (str,),
                    'x_user_email':
                        (str,),
                    'x_user_global_id':
                        (str,),
                },
                'attribute_map': {
                    'program_acronym': 'program_acronym',
                    'year': 'year',
                    'session': 'session',
                    'global_id': 'global_id',
                    'accept_language': 'Accept-Language',
                    'x_user_first_name': 'X-User-FirstName',
                    'x_user_last_name': 'X-User-LastName',
                    'x_user_email': 'X-User-Email',
                    'x_user_global_id': 'X-User-GlobalID',
                },
                'location_map': {
                    'program_acronym': 'path',
                    'year': 'path',
                    'session': 'path',
                    'global_id': 'path',
                    'accept_language': 'header',
                    'x_user_first_name': 'header',
                    'x_user_last_name': 'header',
                    'x_user_email': 'header',
                    'x_user_global_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__enrollments_list
        )
